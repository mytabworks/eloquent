{"version":3,"sources":["../../node_modules/illusionjs/dist/index.js","Eloquent.ts","Collection.ts","Query.ts","Relationships/index.ts","Builder.ts","Relationships/HasOneOrMany.ts","Relationships/HasOne.ts","Relationships/HasMany.ts","Relationships/BelongsTo.ts","Model.ts","Decorators/Model.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../src/eloquent","sourcesContent":["parcelRequire=function(e,r,t,n){var i,o=\"function\"==typeof parcelRequire&&parcelRequire,u=\"function\"==typeof require&&require;function f(t,n){if(!r[t]){if(!e[t]){var i=\"function\"==typeof parcelRequire&&parcelRequire;if(!n&&i)return i(t,!0);if(o)return o(t,!0);if(u&&\"string\"==typeof t)return u(t);var c=new Error(\"Cannot find module '\"+t+\"'\");throw c.code=\"MODULE_NOT_FOUND\",c}p.resolve=function(r){return e[t][1][r]||r},p.cache={};var l=r[t]=new f.Module(t);e[t][0].call(l.exports,p,l,l.exports,this)}return r[t].exports;function p(e){return f(p.resolve(e))}}f.isParcelRequire=!0,f.Module=function(e){this.id=e,this.bundle=f,this.exports={}},f.modules=e,f.cache=r,f.parent=o,f.register=function(r,t){e[r]=[function(e,r){r.exports=t},{}]};for(var c=0;c<t.length;c++)try{f(t[c])}catch(e){i||(i=e)}if(t.length){var l=f(t[t.length-1]);\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=l:\"function\"==typeof define&&define.amd?define(function(){return l}):n&&(this[n]=l)}if(parcelRequire=f,i)throw i;return f}({\"QCba\":[function(require,module,exports) {\n\"use strict\";var t=this&&this.__generator||function(t,e){var r,n,a,i,l={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},\"function\"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(r)throw new TypeError(\"Generator is already executing.\");for(;l;)try{if(r=1,n&&(a=2&i[0]?n.return:i[0]?n.throw||((a=n.return)&&a.call(n),0):n.next)&&!(a=a.call(n,i[1])).done)return a;switch(n=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return l.label++,{value:i[1],done:!1};case 5:l.label++,n=i[1],i=[0];continue;case 7:i=l.ops.pop(),l.trys.pop();continue;default:if(!(a=(a=l.trys).length>0&&a[a.length-1])&&(6===i[0]||2===i[0])){l=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){l.label=i[1];break}if(6===i[0]&&l.label<a[1]){l.label=a[1],a=i;break}if(a&&l.label<a[2]){l.label=a[2],l.ops.push(i);break}a[2]&&l.ops.pop(),l.trys.pop();continue}i=e.call(t,l)}catch(o){i=[6,o],n=0}finally{r=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}},e=this&&this.__spreadArrays||function(){for(var t=0,e=0,r=arguments.length;e<r;e++)t+=arguments[e].length;var n=Array(t),a=0;for(e=0;e<r;e++)for(var i=arguments[e],l=0,o=i.length;l<o;l++,a++)n[a]=i[l];return n};Object.defineProperty(exports,\"__esModule\",{value:!0});var r=function(n){var a=n.prototype,i=!!a.__get,l=!!a.__getAll,o=!!a.__set,u=!!a.__unset,c=!!a.__isset,s=!!a.__iterator,_=i||l||o||u||c||s,f=\"__setStatic\"in n||\"__getStatic\"in n||\"__callStatic\"in n,p=!0;s&&(n.prototype[Symbol.iterator]=function(){var e=this.__iterator(),r=-1,n=e.length;return Array.isArray(e)?{next:function(){return{done:n===++r,value:e[r]}}}:function(){var r,n,a,i;return t(this,function(t){switch(t.label){case 0:for(n in r=[],e)r.push(n);a=0,t.label=1;case 1:return a<r.length?[4,{key:i=r[a],value:e[i]}]:[3,4];case 2:t.sent(),t.label=3;case 3:return a++,[3,1];case 4:return[2]}})}()});var h=Object.create(null);return h.construct=function(t,a){var s=new(n.bind.apply(n,e([void 0],a))),f=Object.create(null);return i&&(f.get=function(t,e,n){p=!1;var a=e in t;return p=!0,\"__illusion__\"===e?t:\"constructor\"===e?r(t[e]):a?t[e]:t.__get.call(n,e)}),l&&(f.get=function(t,e){return t.__getAll.call(t,e)}),o&&(f.set=function(t,e,r){return e in t?t[e]=r:t.__set.call(t,e,r),!0}),c&&(f.has=function(t,e){return p?t.__isset.call(t,e):e in t}),u&&(f.deleteProperty=function(t,e){return t.__unset.call(t,e),!0}),_?new Proxy(s,f):s},\"__getStatic\"in n&&(h.get=function(t,e){return e in t?t[e]:t.__getStatic(e)}),\"__setStatic\"in n&&(h.set=function(t,e,r){return e in t?t[e]=r:t.__setStatic(e,r),!0}),\"__callStatic\"in n&&(h.get=function(t,e,r){return\"__illusion__\"===e?t:t[e]||t.__callStatic.call(r,e)}),f||_?new Proxy(n,h):n};exports.default=r;\n},{}]},{},[\"QCba\"], null)\n","import Illusion from 'illusionjs'\nimport Model from './Model'\nimport { ModelType, PickEntityInstance, PickCustomMethods } from './types'\n\nconst Eloquent = <I extends typeof Model>(model: I): ModelType<PickEntityInstance<I>, PickCustomMethods<I>> => {\n        \n    return Illusion<ModelType<PickEntityInstance<I>, PickCustomMethods<I>>>(model)\n} \n\nexport default Eloquent","import Illusion from 'illusionjs'\nimport { CollectionType } from './types'\n\nclass Collection {\n\n    protected _items: any\n\n    protected _totalCount: number;\n\n    protected _multiple: boolean\n    \n    public hasItem: boolean\n\n\tconstructor(items: any, totalCount: number = 0) {\n\n        this._items = items\n\n        this._totalCount = totalCount\n\n        this._multiple = Array.isArray(items)\n\n        this.hasItem = this._multiple ? items.length > 0 : items !== null\n    }\n\n    public splice(offset: number, pick: number) {\n\n        if(this._multiple) {\n\n            return this.getItems().splice(offset, pick)\n        }\n    }\n\n    public itemCount(): number | void {\n\n        if(this._multiple) {\n            \n            return this.getItems().length\n        }\n    }\n\n    public totalCount(): number {\n\n        return this._totalCount\n\n    }\n\n    public setTotalCount(count: number): void {\n        \n        this._totalCount = count\n    }\n\n    public getItems(): any {\n\n    \treturn this._items\n    }\n\n    public first() {\n\n        if(this._multiple) {\n\n            this._items = this._items[0]\n\n            this._multiple = false\n        }\n\n        return this\n    }\n\n    public valueOf() {\n        \n        return this.toString()\n    }\n\n    public toJSON() {\n\n    \tlet items = this.getItems()\n        \n        if(this.hasItem) {\n\n            if (this._multiple) {\t\n\n                items = items.map((value: any) => value.toJSON())\n            } else {\n\n                items = items.toJSON()\n            }\n        }\n    \t\n    \treturn items\n    }\n\n    public toString(): string {\n\n        return JSON.stringify(this.toJSON(), null, 2)\n    }\n\n    public reduce(callback: any, defaultValue: any) {\n\n        return [...(this as any)].reduce(callback, defaultValue)\n    }\n\n    public map(callback: any) {\n        \n        return [...(this as any)].map(callback)\n    }\n\n    public filter(callback: any) {\n        \n        return [...(this as any)].filter(callback)\n    }\n\n    public forEach(callback: any) {\n        \n        return [...(this as any)].forEach(callback)\n    }\n\n    public __iterator() {\n\n        if(!this.hasItem) {\n\n            return []\n        }\n        \n        return this._multiple ? this.getItems() : this.getItems().__iterator()\n    }\n\n    public __get(key: any): any {\n\n        const items = this.getItems()\n\n        if(this.hasItem) {\n\n            const isFunc = !this._multiple && typeof items[key] === 'function'\n\n            return isFunc ? (...parameters: any[]) => items[key](...parameters) : items[key]\n        }\n    }\n\n    /**\n     * Dynamically set items on the model.\n     *\n     * @param  string  key\n     * @param  mixed   value\n     * @return void\n     */\n    public __set(key: string, value: any): void {\n\n        if(!this._multiple && this.hasItem) {\n\n            this.getItems()[key] = value\n        }\n    }\n\n    /**\n     * Determine if an attribute hasItem on the model.\n     *\n     * @param  string  key\n     * @return bool\n     */\n    public __isset(key: string): boolean | void {\n\n        if(!this._multiple && this.hasItem) {\n\n            return key in this.getItems()\n        }\n    }\n    /**\n     * Unset an attribute on the model.\n     *\n     * @param  string  key\n     * @return void\n     */\n    public __unset(key: string): void {\n        \n        if(!this._multiple && this.hasItem) {\n            \n            delete this.getItems()[key]\n        }\n    }\n\n}\n\nexport default Illusion<CollectionType>(Collection)","import {getConnection} from \"typeorm\";\n\nclass Query {\n    protected _table: any\n    protected _alias: any\n    protected _id: any\n    protected _select: any[] = []\n    protected _where: any[][] = []\n    protected _parameters: { [name: string]: any } = {}\n    protected _whereStart: any[] = []\n    protected _limit: number\n    protected _offset: number\n    protected _take?: number\n    protected _skip?: number\n    protected _orderBy: string[][] = []\n    protected _connection: any\n    protected _modelClass: any\n    protected _data: any\n    constructor(modelClass: any) {\n\n        this._modelClass = modelClass\n    }\n\n    protected modelizeData(data: any): any {\n        \n        if(!Array.isArray(data)) {\n            return new this._modelClass({ \n                exists: true, \n                attributes: {...data} \n            }) \n        } else {\n            return data.map((each: any) => this.modelizeData(each))\n        }\n    }\n\n    public now() {\n\n        return Date.now()\n    }\n\n    public from(table: string) {\n        const [normal, alias] = table.split(\" as \")\n        this._table = normal\n        this._alias = alias\n        return this\n    }\n\n    public as(alias: string) {\n        this._alias = alias\n        return this\n    }\n\n    public select(...select: string[]): this {\n\n        this._select = select\n\n        return this\n    }\n\n    protected whereFactory(column: string, operator: string, needle: any, statement: 'AND' | 'OR'): this {\n\n        const id = `S${this._where.length + 1}`\n\n        this._where.push([`${column} ${operator} ${\n            ['IN', 'NOT IN'].includes(operator) ? (\n                `(:...${id})`\n            ) : (\n                ['BETWEEN', 'NOT BETWEEN'].includes(operator) ? (\n                    `:${id}1 AND :${id}2`\n                ) : (\n                    `:${id}`\n                )\n            )}`\n        , statement])\n\n        if(['BETWEEN', 'NOT BETWEEN'].includes(operator)) {\n            this._parameters[`${id}1`] = needle[0]\n            this._parameters[`${id}2`] = needle[1]\n        } else {\n            this._parameters[id] = needle || operator\n        }\n        \n        return this\n    }\n\n    public where(column: string, operator: string, needle?: any): this {\n\n        return needle ? (\n            this.whereFactory(column, operator, needle, 'AND')\n        ) : (\n            this.whereFactory(column, '=', operator, 'AND')\n        )\n    }\n\n    public orWhere(column: string, operator: string, needle?: any): this {\n\n        return needle ? (\n            this.whereFactory(column, operator, needle, 'OR')\n        ) : (\n            this.whereFactory(column, '=', operator, 'OR')\n        )\n    }\n\n    public whereIn(column: string, needle: any[]): this {\n        return this.where(column, 'IN', needle)\n    }\n\n    public whereNotIn(column: string, needle: any[]): this {\n        return this.where(column, 'NOT IN', needle)\n    }\n\n    public orWhereIn(column: string, needle: any[]): this {\n        return this.orWhere(column, 'IN', needle)\n    }\n\n    public orWhereNotIn(column: string, needle: any[]): this {\n        return this.orWhere(column, 'NOT IN', needle)\n    }\n\n    public whereBetween(column: string, needle: any[]): this {\n        return this.where(column, 'BETWEEN', needle)\n    }\n\n    public whereNotBetween(column: string, needle: any[]): this {\n        return this.where(column, 'NOT BETWEEN', needle)\n    }\n\n    public orWhereBetween(column: string, needle: any[]): this {\n        return this.orWhere(column, 'BETWEEN', needle)\n    }\n\n    public orWhereNotBetween(column: string, needle: any[]): this {\n        return this.orWhere(column, 'NOT BETWEEN', needle)\n    }\n\n    public orderBy(orderBy: string, order: 'ASC' | 'DESC'): this {\n        this._orderBy.push([orderBy, order])\n        return this\n    }\n\n    public limit(value: number): this {\n\n        this._limit = value\n\n        return this\n    }\n\n    public take(value: number): this {\n\n        this._take = value\n\n        return this\n    }\n\n    public offset(value: number): this {\n\n        this._offset = value\n\n        return this\n    }\n\n    public skip(value: number): this {\n\n        this._skip = value\n\n        return this\n    }\n\n    public async first(): Promise<any> {\n        try {\n            const query = await this.querying('select').getRawOne()\n            \n            return query ? this.modelizeData(query) : null\n\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    public async get(): Promise<any> {\n        try {\n            const query = await this.querying('select').getRawMany()\n\n            return this.modelizeData(query)\n            \n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    public async count(select: string = '*'): Promise<any> {\n        try {\n            \n            const query = await this.querying('select').getCount()\n            \n            return query\n\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    public async paginate(page: number, size: number = 10): Promise<{ count: number, models: any[]}> {\n        \n        const models = await this.skip(page * size - size).take(size).get()\n\n        this._take = this._skip = undefined\n        \n        const count = await this.count()\n\n        return { count, models }\n    }\n\n    public async insert(data: any): Promise<any> {\n        try {\n            const query = await this.querying('insert', data).execute()\n            \n            return query.identifiers\n\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    public async update(data: any): Promise<any> {\n        try {\n            const query = await this.querying('update', data).execute()\n            \n            return query.affected\n\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    public async delete(): Promise<any> {\n        try {\n            const query = await this.querying('delete').execute()\n\n            return query.affected\n        } catch (error) {\n            throw new Error(error)\n        }\n    }\n\n    protected querying(type: 'insert' | 'update' | 'delete' | 'select', data?: any):any {\n\n        let connection: any = getConnection().createQueryBuilder()\n\n        const entity = this._modelClass.entity\n\n        const table = this._modelClass.table\n\n        switch(type) {\n            case \"insert\": \n                connection = connection.insert().into(entity).values(data)\n                break;\n            case \"update\": \n                connection = connection.update(entity).set(data)\n                break;\n            case \"delete\": \n                connection = connection.delete().from(entity)\n                break;\n            case \"select\": \n                if(this._select.length) {\n                    connection = this._select.reduce((result, each, index) => {\n                        const isFirst = index === 0\n                        const [select, alias] = each.trim().split(\" as \")\n                        if(isFirst) {\n                            return result.select(select, alias)\n                        } else {\n                            return result.addSelect(select, alias)\n                        }\n                    }, connection)\n                }\n                connection = connection.from(entity, this._alias || table)\n                break;\n            default:\n                break;\n        }\n\n        if(this._where.length) {\n            connection = this._where.reduce((result, [where, condition], index) => {\n                const isFirst = index === 0\n                \n                if (isFirst) {\n                    return result.where(where)\n\n                } else if (condition === 'AND') {\n                    return result.andWhere(where)\n\n                } else {\n                    return result.orWhere(where)\n\n                }\n\n            }, connection)\n        }\n\n        if(type === 'select') {\n\n            if(this._limit) {\n                connection =  connection.limit(this._limit)\n            }\n\n            if(this._offset) {\n                connection =  connection.offset(this._limit)\n            }\n\n            if(this._take) {\n                connection =  connection.take(this._take)\n            }\n\n            if(this._skip) {\n                connection =  connection.skip(this._skip)\n            }\n\n            if(this._orderBy.length) {\n                connection = this._orderBy.reduce((result, args) => {\n                    return result.orderBy(...args)\n                }, connection)\n            }\n        }\n\n        if(Object.keys(this._parameters).length) {\n            connection.setParameters(this._parameters)\n        }\n        \n        return connection\n    }\n}\n\nexport default Query","import Model from '../Model'\nimport { BuilderType, ModelInstanceType } from '../types'\n\ntype Callback = () => any\n\nclass Relationship {\n    protected _relativeBuilder: any;\n    protected _relativeModel: any;\n    protected _currentModel: any;\n    static constraints: boolean = true\n\n    constructor(relativeBuilder: InstanceType<BuilderType>, currentModel: ModelInstanceType<any, any>)\n\t{\n\t\tthis._relativeBuilder = relativeBuilder\n\n\t\tthis._currentModel = currentModel\n\n\t\tthis._relativeModel = (relativeBuilder as any).getModel()\n    }\n\n    static noConstraints(callback: Callback): ReturnType<Callback> {\n\t\tconst previous = this.constraints;\n\n\t\tthis.constraints = false;\n\n\t\t// When resetting the relation where clause, we want to shift the first element\n\t\t// off of the bindings, leaving only the constraints that the developers put\n\t\t// as \"extra\" on the relationships, and not original relation constraints.\n\t\tconst results = callback();\n\n\t\tthis.constraints = previous;\n\n\t\treturn results;\n\t}\n\n    protected getRelativeBuilder(): InstanceType<BuilderType> {\n\n        return this._relativeBuilder\n    }\n\n    protected getRelativeModel(): ModelInstanceType<any, any> {\n\n        return this._relativeModel\n    }\n\n    protected getCurrentModel(): ModelInstanceType<any, any> {\n        \n        return this._currentModel\n    }\n\n    public getCurrentModelsId(currentModels: ModelInstanceType<any, any>[]): string[] {\n\n        return currentModels.map((model: ModelInstanceType<any, any>) => {\n\n            return model.getPrimaryKeyId()\n        })\n    }\n    \n    public __get(method: string): any {\n\n\t\tconst builder = this.getRelativeBuilder()\n\n\t\tif (builder[method as keyof (InstanceType<BuilderType>)]) \n\n\t\t\treturn (...parameters: any[]) => {\n\n\t\t\t\tconst result = (builder as any)[method](...parameters)\n\n\t\t\t\tif (result === builder) return this;\n\n\t\t\t\treturn result;\n\n\t\t\t}\n\t}\n}\n\nexport default Relationship","import Illusion from 'illusionjs'\nimport Relationship from './Relationships'\nimport Collection from './Collection'\nimport { BuilderType, QueryType, ModelInstanceType, CollectionType, PersistentRelative } from './types'\n\ntype WithRelativeConstraints = (relativeModel?: any, relativeName?: string) => any\n\nclass Builder {\n\n    protected _query: InstanceType<QueryType>\n\n    protected _model: ModelInstanceType<any, any>\n\n    protected _modelName: string\n\n    protected _relationType?: string\n\n    protected _persistentLoad: PersistentRelative<any, any> = {}\n\n    protected _factoryMethodThatCanReturn: string[] = ['insert', 'delete', 'update', 'count',\n    'min', 'max', 'avg', 'sum', 'now']\n\n    constructor(query: InstanceType<QueryType>, model: any) {\n\n        this._query = query\n\n        this._model = model\n\n        this._modelName = model.constructor.name\n    }\n\n    protected filterPersistentLoads(callback: (relative: string) => boolean, offset: number = 0): PersistentRelative<any, any> | undefined {\n        const persistentLoads = this._persistentLoad\n\n        const result: PersistentRelative<any, any> | undefined = Object.keys(persistentLoads)\n            .filter(callback)\n            .reduce((result: PersistentRelative<any, any> = {}, relative: string) => {\n\n                result[relative.substr(offset)] = persistentLoads[relative]\n                \n                return result\n            }, undefined)\n\n        return result\n    }\n\n    protected unnestedPersistentLoads(): PersistentRelative<any, any> | undefined {\n\n        return this.filterPersistentLoads((relative) => !relative.includes('.'))\n    }\n\n    protected async persistentLoadRelations(models: ModelInstanceType<any, any>[]): Promise<any[]> {\n\n        const unnestedPersistentLoads = this.unnestedPersistentLoads()\n\n        if(unnestedPersistentLoads) {\n\n            await Promise.all(Object.keys(unnestedPersistentLoads).map((relative: string) => (\n                this.loadRelationship(models, relative, unnestedPersistentLoads[relative])\n            )))\n        }\n\n        return models\n    }\n\n    protected async loadRelationship(models: ModelInstanceType<any, any>[], relative: string, relativeConstraints: WithRelativeConstraints) {\n        const relativeWithBuilder = this.getRelative(relative)\n        \n        relativeWithBuilder.addPersistentConstraints(models)\n\n        relativeConstraints.call(relativeWithBuilder, relativeWithBuilder)\n\n        const relativeModels = await relativeWithBuilder.get()\n\n        return relativeWithBuilder.match(models, relativeModels, relative)\n    }\n\n    protected async persistentDeleteRelations(models: ModelInstanceType<any, any>[]): Promise<any> {\n\n        const unnestedPersistentLoads = this.unnestedPersistentLoads()\n\n        if(unnestedPersistentLoads) {\n\n            const persistentLoadsKeys = Object.keys(unnestedPersistentLoads)\n\n            const relativeDeletes: any[] = await Promise.all(persistentLoadsKeys.map((relative: string) => (\n                this.deleteRelationship(models, relative, unnestedPersistentLoads[relative])\n            )))\n            \n            return relativeDeletes.reduce((result: any, deleted: any[], index: number) => {\n\n                result[persistentLoadsKeys[index]] = deleted\n\n                return result\n            }, {})\n        }\n    }\n\n    protected deleteRelationship(models: ModelInstanceType<any, any>[], relative: string, relativeConstraints: WithRelativeConstraints) {\n        \n        const relativeWithBuilder = this.getRelative(relative)\n        \n        relativeWithBuilder.addPersistentConstraints(models)\n\n        relativeConstraints.call(relativeWithBuilder, relativeWithBuilder)\n\n        return relativeWithBuilder.delete()\n    }\n\n    protected getRelative(relative: string) {\n        \n        const relativeWithBuilder = Relationship.noConstraints(() => this.getModel()[relative]())\n\n        const thirdPartyRelations = this.thirdPartyRelations(relative)\n        \n        if(thirdPartyRelations) {\n\n            relativeWithBuilder.with(thirdPartyRelations)\n        }\n\n        return relativeWithBuilder\n    }\n\n    protected thirdPartyRelations(currentRelative: string): PersistentRelative<any, any> | undefined {\n\n        const offset = `${currentRelative}.`.length\n\n        const getCurrentRelativeNested = this.filterPersistentLoads((relative) => (\n\n            relative.includes(currentRelative) && relative.includes('.')\n        ), offset)\n\n        return getCurrentRelativeNested\n    }\n\n    protected normalizePersistentLoad(relatives: PersistentRelative<any, any>) {\n\n        return Object.keys(relatives).reduce((result: any, key: string) => {\n\n            const value: WithRelativeConstraints = relatives[key]\n\n            if(key.includes('.')) {\n\n                key.split('.').forEach((_, i: number, array: string[]) => {\n                    const isLast = i === array.length - 1\n                    const key = array.slice(0, i + 1).join('.')\n                    // this condition to prevent duplicate relative\n                    if(!(key in result)) {\n                        result[key] = isLast ? value : () => {}\n                    }\n                })\n\n            } else {\n                // this condition to prevent duplicate relative\n                if(!(key in result)) {\n                    result[key] = value\n                }\n            }\n\n            return result\n        }, {})\n    }\n\n    protected setPersistentLoad(relatives: PersistentRelative<any, any>) {\n\n        const persistentLoad = this.normalizePersistentLoad(relatives)\n\n        this._persistentLoad = persistentLoad\n    }\n\n    public with(relatives: string | string[] | PersistentRelative<any, any>): this {\n        \n        if(typeof relatives === 'string') {\n\n            relatives = { [relatives]: () => {} }\n        } else if(Array.isArray(relatives)) {\n\n            relatives = relatives.reduce((result: PersistentRelative<any, any>, relative: string) => {\n\n                result[relative] = () => {}\n                \n                return result\n            }, {})\n        }\n\n        this.setPersistentLoad(relatives)\n\n        return this\n    }\n\n    public find(find: string, column: string[], relatives?: string | string[] | any) : Promise<InstanceType<CollectionType>> {\n\n        this.getQuery().select(...column).where(this.getModel().getPrimaryKey(), find)\n\n        if(relatives) {\n            this.with(relatives)\n        }\n\n        return this.first()\n    }\n\n    public async first(): Promise<InstanceType<CollectionType>> {\n        try {\n\n            const first = await this.getQuery().first()\n\n            if(first) {\n\n                await this.persistentLoadRelations([first])\n            }\n            \n            return new Collection(first)\n\n        } catch(error) {\n        \n            throw new Error(error.message)\n        } \n    }\n\n    public async get(): Promise<InstanceType<CollectionType>> {\n        try {\n            const models = await this.getQuery().get()\n\n            if(models.length) {\n\n                await this.persistentLoadRelations(models)\n            }\n\n            return new Collection(models)\n\n        } catch(error) {\n        \n            throw new Error(error.message)\n        } \n    }\n\n    public async paginate(page: number, size: number): Promise<InstanceType<CollectionType>> {\n        try {\n            const {models, count} = await this.getQuery().paginate(page, size)\n\n            if(models.length) {\n\n                await this.persistentLoadRelations(models)\n            }\n\n            return new Collection(models, count)\n            \n        } catch(error) {\n        \n            throw new Error(error.message)\n        } \n    }\n\n    public async delete(): Promise<{ itemsDeleted: number, relativeDeleted?: any}> {\n        try {\n            const models = await this.getQuery().get()\n\n            let relativeDeleted\n            \n            if(models.length && Object.keys(this._persistentLoad).length) {\n\n                relativeDeleted = await this.persistentDeleteRelations(models)\n            }\n\n            const deleted = await this.getQuery().delete()\n\n            return { itemsDeleted: deleted, relativeDeleted }\n\n        } catch(error) {\n        \n            throw new Error(error.message)\n        } \n    }\n\n    protected isReturnableFactoryMethod(method: string): boolean {\n\n        return this._factoryMethodThatCanReturn.includes(method)\n    }\n\n    public getQuery(): any {\n\n        return this._query\n    }\n\n    public getModel(): ModelInstanceType<any, any> {\n        \n        return this._model\n    }\n\n    __get(method: string) {\n        \n        const modelName = this._modelName\n\n        if (typeof method === 'symbol') \n            \n            return () => `do not use console.log(${modelName}) use instead console.log(${modelName}.toJson())`\n\t\t\n\t\tconst query = this.getQuery()\n\n\t\tif (!(method in query)) \n\t\t{\n\t\t\tthrow new Error(`${modelName}.${method} does not exists`)\n\t\t}\n\n\t\treturn (...parameters: any[]) => {\n\n\t\t\tconst result = query[method](...parameters)\n\t\t\t\n\t\t\treturn this.isReturnableFactoryMethod(method) ? result : this\n\t\t}\n\t}\n}\n\nexport default Illusion<BuilderType>(Builder)","import Relationship from '.'\nimport Model from '../Model'\nimport { BuilderType, ModelInstanceType } from '../types'\n\ntype OneOrMany = 'one' | 'many'\n\nclass HasOneOrMany extends Relationship {\n\n    protected _currentKey: string\n\n    protected _foreignKey: string\n\n    constructor(relativeBuilder: InstanceType<BuilderType>, currentModel: ModelInstanceType<any, any>, foreignKey: string, currentKey: string) {\n\n\t\tsuper(relativeBuilder, currentModel);\n\n\t\tthis._currentKey = currentKey\n\n\t\tthis._foreignKey = foreignKey\n\n\t\tthis.addDefaultConstraints()\n    }\n    \n    protected addDefaultConstraints(): void {\n\n\t\tif (Relationship.constraints) {\n\t\t\t\t\n\t\t\tthis.getRelativeBuilder().where(this.getForeignkey(), this.getCurrentModel().getPrimaryKeyId())\n\t\t}\n    }\n\n    protected getForeignkey(): string {\n\n        return this._foreignKey\n    }\n\n    protected getCurrentKey(): string {\n        \n        return this._currentKey\n\t}\n\t\n\tpublic addPersistentConstraints(currentModels: ModelInstanceType<any, any>[]): void {\n\n\t\tthis.getRelativeBuilder().whereIn(this.getForeignkey(), this.getCurrentModelsId(currentModels));\n\t}\n\n\tpublic match(currentModels: ModelInstanceType<any, any>[], relativeModels: ModelInstanceType<any, any>[], relativeName: string) {\n\t\tthrow Error('match is not in hasOne or hasMany')\n\t}\n\n\tprotected matchOneOrMany(currentModels: ModelInstanceType<any, any>[], relativeModels: ModelInstanceType<any, any>[], relativeName: string, type: OneOrMany): boolean {\n\n\t\tconst groupRelativeResultByForeignKey = this.setForeignKeyAsResultIndex(relativeModels)\n\n        currentModels.forEach((model: any) => {\n\n\t\t\tconst currentModelID = model.getPrimaryKeyId()\n\n            if(currentModelID in groupRelativeResultByForeignKey) {\n\n                model.setRelative(relativeName, this.getRelationValue(groupRelativeResultByForeignKey[currentModelID], type))\n            }\n        })\n\n        return true\n\t}\n\n\tprotected setForeignKeyAsResultIndex(relativeModels: any[]): any {\n\t\t\n\t\tconst foreignKey: any = this.getForeignkey()\n\n        const groupRelativeResultByForeignKey: any = relativeModels.reduce((result: any[], row: any) => {\n\t\t\t\n\t\t\tconst currentModelID = row[foreignKey]\n\n            if(currentModelID in result) {\n                result[currentModelID].push(row)\n            } else {\n                result[currentModelID] = [row]\n            }\n\n            return result\n\t\t}, {})\n\t\t\n\t\treturn groupRelativeResultByForeignKey\n\t}\n\t\n\tprotected getRelationValue(value: ModelInstanceType<any, any>[], type: OneOrMany): any {\n\n\t\treturn type === 'one' ? value[0] : value;\n\t}\n\n}\n\nexport default HasOneOrMany","import Illusion from 'illusionjs'\nimport { HasOneType, ModelInstanceType, CollectionType } from '../types'\nimport HasOneOrMany from './HasOneOrMany'\n\nclass HasOne extends HasOneOrMany {\n\n    public match(currentModels: ModelInstanceType<any, any>[], relativeModels: ModelInstanceType<any, any>[], relativeName: string): boolean {\n\n\t\treturn this.matchOneOrMany(currentModels, relativeModels, relativeName, 'one')\n\t}\n\n\tpublic get():Promise<InstanceType<CollectionType>> {\n\t\t// we rewrite the get in builder so we it can only get the first one\n\t\t// because it suppose to be one-to-one relationship\n\t\treturn this.getRelativeBuilder().first()\n\t}\n\n\tpublic async findOrNew<A = any>(attributes?: A): Promise<ModelInstanceType<any, any>> {\n\n\t\tconst currentModel = this.getCurrentModel()\n\n\t\tconst relativeModel = this.getRelativeModel()\n\n\t\tconst foreignKey = this.getForeignkey()\n\n\t\tconst foreignKeyId = currentModel.getPrimaryKeyId()\n\n\t\tconst collections = await this.getRelativeBuilder().where(foreignKey, foreignKeyId).first()\n\n\t\treturn Object.assign(\n\t\t\tcollections.hasItem ? collections.getItems() : relativeModel,\n\t\t\t{...attributes , [foreignKey]: foreignKeyId}\n\t\t)\n\t}\n}\n\nexport default Illusion<HasOneType>(HasOne)","import Illusion from 'illusionjs'\nimport { HasManyType, ModelInstanceType } from '../types'\nimport HasOneOrMany from './HasOneOrMany'\n\nclass HasMany extends HasOneOrMany {\n\n    public match(currentModels: ModelInstanceType<any, any>[], relativeModels: ModelInstanceType<any, any>[], relativeName: string): boolean {\n\n\t\treturn this.matchOneOrMany(currentModels, relativeModels, relativeName, 'many')\n\t}\n\n\tpublic create<A = any>(attributes?: A): ModelInstanceType<any, any> {\n\n\t\tconst currentModel = this.getCurrentModel()\n\n\t\tconst relativeModel = new (this.getRelativeModel() as any).constructor\n\n\t\tconst foreignKey = this.getForeignkey()\n\n\t\treturn Object.assign(relativeModel, { [foreignKey]: currentModel.getPrimaryKeyId(), ...attributes})\n\t}\n}\n\nexport default Illusion<HasManyType>(HasMany)","import Illusion from 'illusionjs'\nimport Relationship from '.'\nimport Model from '../Model'\nimport { BelongsToType, BuilderType, ModelInstanceType } from '../types'\n\nclass BelongsTo extends Relationship {\n\n    protected _ownerKey: string\n\n    protected _foreignKey: string\n\n    constructor(relativeBuilder: InstanceType<BuilderType>, currentModel: ModelInstanceType<any, any>, foreignKey: string, ownerKey: string) {\n\n\t\tsuper(relativeBuilder, currentModel);\n\n\t\tthis._ownerKey = ownerKey\n\n        this._foreignKey = foreignKey\n\n\t\tthis.addDefaultConstraints()\n    }\n    \n    protected addDefaultConstraints(): void {\n\n\t\tif (Relationship.constraints) {\n\n            const currentModel = this.getCurrentModel() as any\n\t\t\t\t\n\t\t\tthis.getRelativeBuilder().where(this.getOwnerKey(), currentModel[this.getForeignkey()])\n\t\t}\n    }\n\n    protected getForeignkey(): string {\n\n        return this._foreignKey\n    }\n\n    protected getOwnerKey(): string {\n        \n        return this._ownerKey\n\t}\n\t\n\tpublic addPersistentConstraints(currentModels: ModelInstanceType<any, any>[]): void {\n\n\t\tthis.getRelativeBuilder().whereIn(this.getOwnerKey(), this.getCurrentModelsId(currentModels));\n    }\n\n    public getCurrentModelsId(currentModels: ModelInstanceType<any, any>[]): string[] {\n\n        return currentModels.map((model: any) => {\n\n            return model[this.getForeignkey()]\n        })\n    }\n\n\tpublic match(currentModels: ModelInstanceType<any, any>[], relativeModels: ModelInstanceType<any, any>[], relativeName: string): boolean {\n\n\t\tconst groupParentModelResultByPrimaryKey = this.setPrimaryKeyAsResultIndex(relativeModels)\n\n        currentModels.forEach((model: any) => {\n\n\t\t\tconst childForeignId = model[this.getForeignkey()]\n\n            if(childForeignId in groupParentModelResultByPrimaryKey) {\n\n                model.setRelative(relativeName, this.getRelationValue(groupParentModelResultByPrimaryKey[childForeignId]))\n            }\n        })\n\n        return true\n\t}\n\n\tprotected setPrimaryKeyAsResultIndex(relativeModels: ModelInstanceType<any, any>[]): any {\n\t\t\n\t\tconst ownerKey: any = this.getOwnerKey()\n\n        const groupParentModelResultByPrimaryKey: any = relativeModels.reduce((result: any[], row: any) => {\n\t\t\t\n\t\t\tconst ownerId = row[ownerKey]\n\n            if(ownerId in result) {\n                result[ownerId].push(row)\n            } else {\n                result[ownerId] = [row]\n            }\n\n            return result\n\t\t}, {})\n\t\t\n\t\treturn groupParentModelResultByPrimaryKey\n\t}\n\t\n\tprotected getRelationValue(value: ModelInstanceType<any, any>[]): ModelInstanceType<any, any> {\n\n\t\treturn value[0]\n\t}\n\n}\n\nexport default Illusion<BelongsToType>(BelongsTo)","import Collection from './Collection'\nimport Query from './Query'\nimport Builder from './Builder'\nimport HasOne from './Relationships/HasOne'\nimport HasMany from './Relationships/HasMany'\nimport BelongsTo from './Relationships/BelongsTo'\nimport { \n    ModelType, \n    ModelInstanceType, \n    CollectionInstanceType, \n    BuilderType,\n    QueryInstanceType,\n    HasManyInstanceType,\n    HasOneInstanceType,\n    BelongsToInstanceType,\n} from './types'\n\nclass Model {\n\n    public static entity: any\n\n    public static table: string\n\n    protected relatives: any = {}\n\n    protected originals: any = {}\n\n    protected attributes: any = {}\n\n    protected primaryKey: string = 'id'\n\n    protected guarded: string[] = []\n\n    protected fillable: string[] = []\n\n    protected updatable: string[] = []\n\n    protected updatedAtColumn: string = 'updated_at'\n\n    protected createdAtColumn: string = 'created_at'\n\n    protected timestamp: boolean = true\n\n    protected exists: boolean = false\n\n    constructor (props: any = {}) {\n\n        const { exists, attributes } = props\n        \n        if(exists && attributes) {\n            this.originals = {...attributes}\n            this.attributes = {...attributes}\n            this.exists = exists\n        }\n    }\n\n    protected isFillable(key: string): boolean {\n\n        if(this.exists && this.updatable.length) {\n\n            return this.updatable.includes(key)\n        }\n\n        if (this.fillable.includes(key)) return true\n\n        if (this.isGuarded(key)) return false\n\n        return this.fillable.length === 0\n    }\n\n    protected isGuarded(key: string): boolean {\n\n        return this.guarded.includes(key) || this.guarded.includes('*')\n    }\n\n    protected syncAttrAndOrig(): void {\n\n        this.originals = {...this.attributes}\n    }\n\n    protected getAttributes(): any {\n\n        return this.attributes\n    }\n\n    protected getAttribute(key: string): any {\n\n        if(typeof key === 'symbol') {\n\n            return 'do not console.log(sampleinstance) use sampleinstance.toJSON()'\n        }\n\n        // If the key references is an attribute\n        if (key in this.attributes) {\n\n            return this.attributes[key]\n        }\n\n        // If the key already exists in the relativeships object we will return it\n        const relative: string = key.indexOf('$') === 0 ? key.substr(1) : key\n        \n        if (relative in this.relatives) {\n            \n            return this.relatives[relative];\n        }\n\n    }\n\n    protected setAttribute(key: string, value: string): void {\n\n        if (this.isFillable(key)) {\n\n            this.attributes[key] = value as any\n        }\n    }\n\n    protected setAttributeRaw(key: string, value: string): void {\n\n        this.attributes[key] = value as any\n    }\n\n    protected getAttributeChanges(): any {\n\n        const originals = this.originals\n\n        const attributes = this.attributes\n\n        const changes = Object.keys(attributes).filter((key: string) => {\n\n            return key !== 'id' && originals[key] !== attributes[key]\n        })\n        .reduce((result: any = {}, key: string) => {\n\n            result[key] = attributes[key]\n\n            return result\n        }, undefined)\n\n        return changes\n    }\n\n    protected setTimestamps(timestamp: any): void {\n\n        this.setAttributeRaw(this.updatedAtColumn, timestamp)\n\n        if (!this.exists)\n        {\n            this.setAttributeRaw(this.createdAtColumn, timestamp)\n        }\n    }\n\n    protected setPrimaryKeyForSave(query: Query): Query {\n\n        return query.where(this.primaryKey, this.getPrimaryKeyId())\n    }\n\n    public getPrimaryKeyId(): any {\n\n        const originalID = this.originals[this.primaryKey]\n\n        if(originalID) {\n            return originalID as any\n        }\n\n        return this.getAttribute(this.primaryKey)\n    }\n\n    public getPrimaryKey(): string {\n\n        return this.primaryKey\n    }\n\n    protected async queryInsert(query: Query): Promise<any> {  \n        try {\n            if (this.timestamp) {\n                this.setTimestamps(query.now())\n            }\n            \n            const [{id}] = await query.insert(this.getAttributes())\n\n            this.setAttributeRaw(this.primaryKey, id);\n\n            this.exists = true;\n\n            return id;\n\n        } catch(error) {\n\n            throw new Error(error.message)\n        } \n    }\n\n    protected async queryUpdate(query: Query): Promise<boolean | void> {   \n        try {\n            let updates = this.getAttributeChanges()\n\n            if(!updates) \n\n                return false;\n\n            if(this.timestamp) {\n\n                this.setTimestamps(query.now())\n\n                updates = this.getAttributeChanges()\n\n            }\n\n            await this.setPrimaryKeyForSave(query).update(updates);\n\n            return true;\n\n        } catch(error) {\n\n            throw new Error(error.message)\n        } \n    }\n\n    protected async queryDelete(query: Query): Promise<boolean> {\n        try {\n\n            await this.setPrimaryKeyForSave(query).delete()\n\n        } catch(error) {\n\n            throw new Error(error.message)\n        } \n\n        return true;\n    }\n\n    protected createBuilder(): InstanceType<BuilderType> {\n\n        return new Builder(this.createQuery(), this)\n    }\n\n    protected createQuery(): Query {\n\n        return new Query(this.constructor)\n    }\n\n    protected setRelative(key: string, value: any): void {\n\n        this.relatives[key] = new Collection(value)\n    }\n\n    protected getForeignKey(): string {\n        return `${(this.constructor as any).table}_${this.primaryKey}`\n    }\n\n    protected belongsTo<D, R>(parent: ModelType<D, R>, foreignkey?: string, ownerkey?: string): BelongsToInstanceType<D, R> {\n\n        const parentModel: any = new parent()\n\n        const fk = foreignkey || `${(this.constructor as any).table}.${parentModel.getForeignKey()}`\n\n        const ok = ownerkey || parentModel.primaryKey\n\n        return new BelongsTo(parentModel.createBuilder(), this, fk, ok);\n    }\n\n    protected hasOneOrMany(relationType: any, relative: any, foreignkey?: string, localkey?: string) {\n\n        const relativeModel = new relative()\n\n        const fk = foreignkey || `${relativeModel.table()}.${this.getForeignKey()}`\n\n        const lk = localkey || this.primaryKey\n\n        return new relationType(relativeModel.createBuilder(), this, fk, lk);\n    }\n\n    protected hasOne<D, R>(relative: ModelType<D, R>, foreignkey?: string, localkey?: string): HasOneInstanceType<D, R> {\n\n        return this.hasOneOrMany(HasOne, relative, foreignkey, localkey)\n    }\n\n    protected hasMany<D, R>(relative: ModelType<D, R>, foreignkey?: string, localkey?: string): HasManyInstanceType<D, R> {\n\n        return this.hasOneOrMany(HasMany, relative, foreignkey, localkey)\n    }\n\n    public async save(attribute?: any): Promise<string | boolean> {\n        try {\n\n            if(attribute) {\n\n                Object.assign(this, attribute)\n            }\n\n            const builderWithQuery = this.createBuilder()\n\n            let saved\n\n            if (this.exists) \n            {\n                saved = await this.queryUpdate(builderWithQuery as any)\n            }\n\n            else\n            {\n                saved = await this.queryInsert(builderWithQuery as any)\n            }\n\n            this.syncAttrAndOrig()\n\n            return saved\n\n        } catch(error) {\n            \n            throw new Error(error.message)\n        } \n    }\n\n    public async delete(): Promise<boolean> {\n        try {\n            const builderWithQuery = this.createBuilder()\n\n            if (this.exists) {\n\n                const deleted = await this.queryDelete(builderWithQuery as any)\n\n                this.exists = false\n\n                return deleted;\n            }\n\n            return false\n\n        } catch(error) {\n\n            throw new Error(error.message)\n        } \n    }\n\n    protected static createModel(): Model {\n\n        return new this()\n    }\n\n    protected static createBuilderStatic(): InstanceType<BuilderType> {\n\n        return this.createModel().createBuilder()\n    }\n\n    public static async destroy(ids: string[]): Promise<number> {\n        try {\n            // We'll initialize a destroyed here so we will return the total number of deletes\n            const model = this.createModel()\n            \n            const builderWithQuery = model.createBuilder() as any\n\n            // We will actually pull the models from the database table and call delete on\n            // each of them individually so that their events get fired properly with a\n            // correct set of attributes in case the developers wants to check these.\n            const key = model.getPrimaryKey()\n\n            const collection = await builderWithQuery.whereIn(key, ids).delete()\n\n            return collection\n\n        } catch(error) {\n            \n            throw new Error(error.message)\n        } \n    }\n\n    public static find(id: string, columns: string[] = ['*'], relatives?: string | string[] | {[name: string]: ($where: QueryInstanceType<any, any>) => void}): Promise<ModelInstanceType<any, any> & CollectionInstanceType<any, any>> {   \n\n        return this.createBuilderStatic().find(id, columns, relatives);\n    }\n\n    public static async findOrNew(id: string, columns = ['*']): Promise<(ModelInstanceType<any, any> & CollectionInstanceType<any, any>) | ModelInstanceType<any, any> >{\n        try {\n            const model = await this.find(id, columns)\n\n            if (model) return model;\n\n            return new this();\n            \n        } catch(error) {\n        \n            throw new Error(error.message)\n        } \n    }\n     \n    public __iterator(): any {\n\n        return this.toJSON()\n    }\n\n    public __get(key: string): string | object {\n\n        if (typeof key === 'symbol')\n            \n            return this.toJSON()\n        \n        return this.getAttribute(key)\n    }\n\n    public __set(key: string, value: any): void {\n\n        this.setAttribute(key, value)\n    }\n\n    public __isset(key: string): boolean {\n\n        return key in this.attributes\n    }\n\n    public __unset(key: string): void {\n\n        delete this.attributes[key]\n    }\n\n    public static __callStatic(method: string) {\n\n        const instance = this.createBuilderStatic() as any;\n\n        return (...parameters: any[]) => instance[method](...parameters)\n    }\n\n    public toString(): string {\n\n        return JSON.stringify(this.toJSON(), null, 2);\n    }\n\n    public toJSON(): object {   \n        let data: any = {...this.attributes}\n\n        const relatives = this.relatives\n\n        for(let relate in relatives)\n        {\n            data[relate] = !!relatives[relate] ? relatives[relate].toJSON(): {}\n        }\n\n        return data\n    }\n}\n\nexport default Model","import ModelBase from '../Model'\n\nexport const Model = <E>(Entity: E, name: string) => {\n    return <T extends typeof ModelBase>(target: T) => {\n        target.entity = Entity\n        target.table = name\n    }\n}","export { default as Eloquent } from './Eloquent'\nexport { default as Model } from './Model'\nexport { Model as ModelEntity } from './Decorators/Model'\n"]}